})
spplot(poly, "grid",
panel = function(...) {
panel.gridplot(..., border="black")
sp.polygons(shp)
sp.points(df, cex=1.5)
panel.text(...)
})
library("rgdal")
install.packages("rgdal")
spplot(poly, "grid",
panel = function(...) {
panel.gridplot(..., border="black")
sp.polygons(shp)
sp.points(df, cex=1.5)
panel.text(...)
})
spplot(poly, "grid",
panel = function(...) {
panel.gridplot(..., border="black")
sp.polygons(df)
sp.points(df, cex=1.5)
panel.text(...)
})
ssplot(poly)
library(sp)
ssplot(poly)
spplot(poly)
spplot(vp)
spplot(VP, "grid",
panel = function(...) {
panel.gridplot(..., border="black")
sp.polygons(df)
sp.points(df, cex=1.5)
panel.text(...)
})
spplot(vp, "grid",
panel = function(...) {
panel.gridplot(..., border="black")
sp.polygons(df)
sp.points(df, cex=1.5)
panel.text(...)
})
spplot(vp,
panel = function(...) {
panel.gridplot(..., border="black")
sp.polygons(df)
sp.points(df, cex=1.5)
panel.text(...)
})
spplot(vp,
panel = function(...) {
panel.gridplot(..., border="black")
sp.points(df, cex=1.5)
panel.text(...)
})
spplot(vp)
data.frame(df, grid = over(df, vp))
plot(vp)
plot(df, color = "red", add = TRUE)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
prueba <- GeoAccidentalidad[by = list(FECHA)]
library(data.table)
prueba <- GeoAccidentalidad[by = list(FECHA, `RANGO HORARIO`, lon, lat)]
View(prueba)
prueba <- GeoAccidentalidad[,by = list(FECHA, `RANGO HORARIO`, lon, lat)]
prueba <- GeoAccidentalidad[,,by = list(FECHA, `RANGO HORARIO`, lon, lat)]
prueba <- GeoAccidentalidad[., by = list(FECHA, `RANGO HORARIO`, lon, lat)]
prueba <- GeoAccidentalidad[,.N , by = list(FECHA, `RANGO HORARIO`, lon, lat)]
prueba <- na.omit(prueba)
View(prueba)
prueba[,.N, by = FECHA]
prueba[,.N, by = `RANGO HORARIO`]
prueba[,.N, by = FECHA]
p <- prueba[,.N, by = FECHA]
View(p)
8*365
9*365
GeoAccidentalidad[, .N, by = FECHA]
prueba <- GeoAccidentalidad[,.N , by = list(FECHA, `RANGO HORARIO`, `LUGAR ACCIDENTE`, lon, lat)]
R2043_CVf_26 <- read.table("~/Descargas/R2043_CVf_26.dat", quote="\"")
View(R2043_CVf_26)
source('~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Scripts/Fase 2/diagramas_grid.R')
# Esto hace un data.frame con el grid al que pertenece cada coordenada
data.frame(df, grid = over(df, poly))
randomCenters <- spsample(df, 10, type = "random")
df <- randomCenters
# GRID CUADRADO:
# Si lo que buscamos es un grid normal y corriente, se puede crear así:
grid  <- GridTopology(cellcentre.offset= c(-3.7,40.39), cellsize = c(0.03,0.03), cells.dim = c(3,3)) # Centro, distancia de cada celda, y número de celdas en cada dimensión
sg    <- SpatialGrid(grid)
poly  <- as.SpatialPolygons.GridTopology(grid)
# NO OLVIDES ESTO SI QUIERES JUNTAR TODO EN LA MISMA GRÁFICA Y HACER OVER. Quizás vale con CRS("+proj=longlat") (en todos claro)
proj4string(poly) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs ")
plot(poly)
plot(df, color = "red", add = TRUE)
# Esto hace un data.frame con el grid al que pertenece cada coordenada
data.frame(df, grid = over(df, poly))
# En el post del grid numerado se puede ver como pasar de esta cuadrícula a un spdf si fuese necesario para un spplot o lo que fuese.
df <- randomCenters
# GRID CUADRADO:
# Si lo que buscamos es un grid normal y corriente, se puede crear así:
grid  <- GridTopology(cellcentre.offset= c(-3.7,40.39), cellsize = c(0.03,0.03), cells.dim = c(3,3)) # Centro, distancia de cada celda, y número de celdas en cada dimensión
sg    <- SpatialGrid(grid)
poly  <- as.SpatialPolygons.GridTopology(grid)
# NO OLVIDES ESTO SI QUIERES JUNTAR TODO EN LA MISMA GRÁFICA Y HACER OVER. Quizás vale con CRS("+proj=longlat") (en todos claro)
proj4string(poly) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs ")
plot(poly)
plot(df, color = "red", add = TRUE)
# Esto hace un data.frame con el grid al que pertenece cada coordenada
data.frame(df, grid = over(df, poly))
# En el post del grid numerado se puede ver como pasar de esta cuadrícula a un spdf si fuese necesario para un spplot o lo que fuese.
rm(list = ls())
source('~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Scripts/Fase 2/datos_stnn.R')
View(crash)
heat <- fread("Raw_data/heat.csv")
View(heat)
cras <- crash[, FECHA := NULL]
crash <- crash[, FECHA := NULL]
View(crash)
View(crash)
save()
save(crash, "Cleaned_data/crash.csv")
save("Cleaned_data/crash.csv", crash)
save(crash, file = "Cleaned_data/crash.csv")
crash <- as.matrix(crash[, FECHA := NULL])
save(crash, file = "Cleaned_data/crash.csv")
crash <- crash[, FECHA := NULL]
source('~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Scripts/Fase 2/datos_stnn.R')
write.csv(crash, file = "Raw_data/crash.csv")
help("write.csv")
write.csv(crash, file = "Raw_data/crash.csv", row.names = FALSE, col.names = FALSE)
write.table(crash, file = "Raw_data/crash.csv", row.names = FALSE, col.names = FALSE)
write.table(crash, file = "Raw_data/crash.csv", append = TRUE, row.names = FALSE, col.names = FALSE)
View(poly)
crash2 <- fread("Raw_data/crash.csv")
View(crash2)
write.table(crash, file = "Raw_data/crash.csv", row.names = FALSE, col.names = FALSE)
crash2 <- fread("Raw_data/crash.csv")
View(crash2)
W1 <- fread("Raw_data/heat_relations.csv")
View(W1)
install.packages("hierarchicalDS")
matrix(3,3)
matrix(3)
matrix(5,5)
matrix(nrow = 3, ncol = 3)
make_matrix = function(n_zonas){
M = matrix(nrow = n_zonas, ncol = n_zonas)
for (r in 1:n_zonas){
for (c in 1:n_zonas){
i = r*cols + c
# Two inner diagonals
if (c > 0){
M[i-1,i] = M[i,i-1] = 1
}
# Two outer diagonals
if (r > 0){
M[i-cols,i] = M[i,i-cols] = 1
}
}
}
}
W = make_matrix(5)
make_matrix = function(n_zonas){
M = matrix(nrow = n_zonas, ncol = n_zonas)
for (r in 1:n_zonas){
for (c in 1:n_zonas){
i = r*n_zonas + c
# Two inner diagonals
if (c > 0){
M[i-1,i] = M[i,i-1] = 1
}
# Two outer diagonals
if (r > 0){
M[i-n_zonas,i] = M[i,i-n_zonas] = 1
}
}
}
}
W = make_matrix(5)
make_matrix = function(n_zonas){
M = matrix(nrow = n_zonas, ncol = n_zonas)
for (r in 1:n_zonas){
for (c in 1:n_zonas){
i = r*n_zonas + c
# Two inner diagonals
if (c > 0){
M[i,i] = M[i,i] = 1
}
# Two outer diagonals
if (r > 0){
M[i-n_zonas,i] = M[i,i-n_zonas] = 1
}
}
}
}
W = make_matrix(5)
matrix(nrow = 3, ncol = 3)
matrix(nrow = 3, ncol = 3, 0)
install.packages("matlab")
# 11_ A continuación se construye la matriz de adjacencia
library(matlab)
sum(c(1,2,3))
diagVec1 = repmat((ones(n_zonas-1, 1); 0), n_zonas, 1)
diagVec1 = repmat((ones(n_zonas-1, 1), 0), n_zonas, 1)
W2 <- fread("Raw_data/crash_relations.csv")
View(W2)
write.table(W2, file = "Raw_data/crash_relations.csv", row.names = FALSE, col.names = FALSE)
source('~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Scripts/Fase 2/generar_datos.R')
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
View(Accidentalidad)
source('~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Scripts/Fase 2/generar_datos.R')
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
View(Accidentalidad)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
View(Geocoded)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
View(GeoAccidentalidad)
prueba <- Accidentalidad[250673:]
prueba <- Accidentalidad[250673:252998]
View(prueba)
prueba <- prueba[15:2326]
View(prueba)
library(data.table); library(ggmap); library(beepr); library(plyr)
register_google(key = "AIzaSyBo4vW2UT8J5SjT88n3kqHN3e9t76ZUkmg")
dir1 <- data.table("Direcciones" = unique(prueba[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0 , paste(`LUGAR ACCIDENTE`, Nº, "MADRID")]))
dir2 <- data.table("Direcciones" = unique(prueba[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0 , paste(`LUGAR ACCIDENTE`, "MADRID")]))
# direcciones <- data.table("Direcciones" = unique(prueba[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) , paste(`LUGAR ACCIDENTE`, Nº, "MADRID")]))
direcciones <- rbind(dir1, dir2)
View(direcciones)
ptm <- proc.time()
geocoded32 <- geocode(direcciones$Direcciones)
write.csv(geocoded32, file = "geocoded32.csv")
proc.time() - ptm
beep()
geocoded32
View(geocoded32)
geocoded <- setcolorder(geocoded32,order(c(2,1)))
geocoded <- cbind(direcciones, geocoded)
View(geocoded)
unique(rbind(Geocoded,geocoded))
Geocoded <- rbind(Geocoded, geocoded32)
Geocoded <- unique(rbind(Geocoded, geocoded32))
Geocoded <- rbind(Geocoded, geocoded)
Geocoded <- unique(Geocoded)
View(Geocoded)
View(GeoAccidentalidad)
save(Geocoded, file = "../Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
aux1 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
aux2 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
aux <- rbind(aux1, aux2)
dirGeolocalizadas <- cbind(aux, "lat" = Geocoded$lat, "lon" = Geocoded$lon)
GeoAccidentalidad <- join(Accidentalidad, dirGeolocalizadas)
View(dirGeolocalizadas)
View(GeoAccidentalidad)
View(Accidentalidad)
View(Geocoded)
rm(list = ls())
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
aux1 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
aux2 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
aux <- rbind(aux1, aux2)
dirGeolocalizadas <- cbind(aux, "lat" = Geocoded$lat, "lon" = Geocoded$lon)
unique(Geocoded)
View(Geocoded)
unique(aux)
View(Accidentalidad)
View(aux1)
View(aux2)
View(aux)
unique(aux$`LUGAR ACCIDENTE`)
View(Geocoded)
unique(Geocoded$Direcciones)
prueba = unique(Geocoded$Direcciones)
prueba <- Geocoded[unique(Direcciones)]
prueba <- Geocoded[!duplicated(Direcciones)]
View(prueba)
Geocoded <- Geocoded[!duplicated(Direcciones)]
aux1 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
aux2 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
aux <- rbind(aux1, aux2)
dirGeolocalizadas <- cbind(aux, "lat" = Geocoded$lat, "lon" = Geocoded$lon)
GeoAccidentalidad <- join(Accidentalidad, dirGeolocalizadas)
save(Geocoded, file = "../Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
Accidentalidad$FECHA == GeoAccidentalidad$FECHA
View(GeoAccidentalidad)
View(Accidentalidad)
Accidentalidad[, .N, by = list(`DIA SEMANA`)]
GeoAccidentalidad[, .N, by = list(`DIA SEMANA`)]
save(GeoAccidentalidad, file = "../Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
View(GeoAccidentalidad)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
View(Geocoded)
Geocoded[20045,2] = 40.434103
View(Geocoded)
Geocoded[20045,3] = -3.733643
x,y = 1,2
Geocoded[18259,2] = 40.398707
Geocoded[18259,3] = -3.543040
Geocoded[30819,2] = 40.489579
Geocoded[30819,3] = -3.611237
Geocoded[39193,2] = 40.472548
Geocoded[29193,2] = 40.472548
Geocoded[29193,3] = -3.636027
View(Geocoded)
Geocoded[1483,2] = 40.458707
Geocoded[1483,3] = -3.595907
Geocoded[9001,2] = 40.430815
Geocoded[9001,3] = -3.696235
Geocoded[30918,2] = 40.457086
Geocoded[30918,3] = -3.699721
Geocoded[28212,2] = 40.489458
Geocoded[28212,3] = -3.692229
Geocoded[19693,2] = 40.460832
Geocoded[19693,3] = -3.615786
View(prueba)
save(Geocoded, file = "../Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
aux1 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
aux2 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
aux <- rbind(aux1, aux2)
dirGeolocalizadas <- cbind(aux, "lat" = Geocoded$lat, "lon" = Geocoded$lon)
GeoAccidentalidad <- join(Accidentalidad, dirGeolocalizadas)
save(GeoAccidentalidad, file = "../Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
View(GeoAccidentalidad)
Accidentalidad[, .N, by = list(`DIA SEMANA`)]
GeoAccidentalidad[, .N, by = list(`DIA SEMANA`)]
hist(GeoAccidentalidad[, .N, by = list(`DIA SEMANA`)])
hist(GeoAccidentalidad[, .N, by = list(`DIA SEMANA`)]$`DIA SEMANA`)
hist(GeoAccidentalidad[, .N, by = list(`DIA SEMANA`)]$N)
View(GeoAccidentalidad)
library(ggplot2)
df <- GeoAccidentalidad[, .N, by = list(`DIA SEMANA`)]
View(df)
ggplot(df, aes(x = `DIA SEMANA`)) + geom_histogram()
ggplot(df, aes(x = `DIA SEMANA`)) + geom_histogram(stat = "count")
ggplot(df, aes(x = `DIA SEMANA`)) + geom_histogram(stat = "count", aes(y = N))
ggplot(GeoAccidentalidad, aes(x = `DIA SEMANA`)) + geom_histogram()
ggplot(GeoAccidentalidad, aes(x = lat)) + geom_histogram()
ggplot(df, aes(x = `DIA SEMANA`, y = N)) + geom_histogram()
ggplot(df, aes(x = `DIA SEMANA`, y = N)) + geom_histogram(stat = "identity")
ggplot(df, aes(x = `DIA SEMANA`)) + geom_histogram(stat = "identity")
ggplot(df, aes(x = `DIA SEMANA`, y = N)) + geom_histogram(stat = "identity")
ggplot(GeoAccidentalidad, aes(x = `DIA SEMANA`)) + geom_histogram()
ggplot(GeoAccidentalidad, aes(x = `DIA SEMANA`)) + geom_histogram(stat = "count")
ggplot(GeoAccidentalidad, aes(x = `DIA SEMANA`)) + geom_histogram(stat = "count") + scale_x_discrete(limits=c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES", "SABADO", "DOMINGO"))
ggplot(GeoAccidentalidad, aes(x = `DIA SEMANA`)) + geom_histogram(stat = "count", fill = "white") + scale_x_discrete(limits=c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES", "SABADO", "DOMINGO"))
ggplot(GeoAccidentalidad, aes(x = `DIA SEMANA`)) + geom_histogram(stat = "count", color = "black" , fill = "white") + scale_x_discrete(limits=c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES", "SABADO", "DOMINGO"))
ggplot(GeoAccidentalidad, aes(x = `DIA SEMANA`)) + geom_histogram(stat = "count", color = "black" , fill = "blue") + scale_x_discrete(limits=c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES", "SABADO", "DOMINGO"))
ggplot(GeoAccidentalidad, aes(x = `DIA SEMANA`)) + geom_histogram(stat = "count", color = "black" , fill = "orange") + scale_x_discrete(limits=c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES", "SABADO", "DOMINGO"))
library(knitr)
knit('estudio_temporal.Rmd')
knit('../TFM/Resultados parciales/estudio_temporal.Rmd')
knit('/TFM/Resultados parciales/estudio_temporal.Rmd')
knit('../TFM/Resultados parciales/estudio_temporal.Rmd')
getwd()
knit('/home/rodrigo/Universidad/Máster en IA Avanzada/TFM/Resultados parciales/estudio_temporal.Rmd')
GeoAccidentalidad <- GeoAccidentalidad[, FECHA := dmy(FECHA)]
library(lubridate)
GeoAccidentalidad <- GeoAccidentalidad[, FECHA := dmy(FECHA)]
GeoAccidentalidad[,.N, by = list(year(FECHA))]
knitr::opts_chunk$set(echo = TRUE)
ggplot(car_crash, aes(x = year(FECHA))) + geom_histogram(stat = "count", color = "black" , fill = "red")  + labs(title = "Frecuencia de accidentes por año\n", x = "Mes", y = "Número de accidentes")
library(data.table)
directorio = "../Accidentes de tráfico - Madrid/Raw_data"
año = "2018.csv"
dt1 = fread(paste(directorio, paste0("01-", año), sep = "/"))
View(dt1)
dt1 <- dt1[!grepl("M-30", tipo_elem)]
View(dt1)
prueba <- dt1[1:1000]
View(prueba)
prueba <- dt1[1:10000]
View(prueba)
prueba <- dt1[1:12000]
View(prueba)
prueba <- dt1[1:13000]
prueba <- dt1[1:10000]
prueba[, c("FECHA", "RANGO HORARIO") := tstrsplit(fecha, " ", fixed=TRUE)]
View(prueba)
dt1[, c("FECHA", "RANGO HORARIO") := tstrsplit(fecha, " ", fixed=TRUE)]
dt1[, fecha:=NULL]
dt1[, c(1,9,10,2,3,4,5,6,7,8)]
View(dt1)
View(dt1)
prueba <- prueba[, c(1,9,10,2,3,4,5,6,7,8)]
View(prueba)
dt1 <- dt1[, c(1,9,10,2,3,4,5,6,7,8)]
View(dt1)
prueba[, fecha:=NULL]
View(prueba)
prueba <- dt1[1:10000]
View(prueba)
prueba[order(id), mean(intensidad), by= (seq(nrow(prueba)) - 1) %/% 4]
media = prueba[order(id), mean(intensidad), by= (seq(nrow(prueba)) - 1) %/% 4]
View(media)
media = prueba[order(id), mean(intensidad), mean(vmed), by= (seq(nrow(prueba)) - 1) %/% 4]
media = prueba[order(id), int_med = mean(intensidad), v_med = mean(vmed), by= (seq(nrow(prueba)) - 1) %/% 4]
media = prueba[order(id), c("int_med","v_med") = list(mean(intensidad), v_med = mean(vmed)), by= (seq(nrow(prueba)) - 1) %/% 4]
media = prueba[order(id), c("int_med","v_med") = list(mean(intensidad), mean(vmed)), by= (seq(nrow(prueba)) - 1) %/% 4]
media = prueba[order(id), c("int_med","v_med") ;= list(mean(intensidad), mean(vmed)), by= (seq(nrow(prueba)) - 1) %/% 4]
media = prueba[order(id), c("int_med","v_med") := list(mean(intensidad), mean(vmed)), by= (seq(nrow(prueba)) - 1) %/% 4]
View(media)
View(prueba)
library(lubridate)
prueba[`RANGO HORARIO`:= hms(`RANGO HORARIO`)]
prueba[`RANGO HORARIO`= hms(`RANGO HORARIO`)]
prueba[,`RANGO HORARIO`:= hms(`RANGO HORARIO`)]
View(prueba)
hour(prueba$`RANGO HORARIO`[1])
hour(prueba$`RANGO HORARIO`[190])
View(media)
View(prueba)
prueba <- dt1[1:10000]
prueba[,`RANGO HORARIO`:= hms(as.character(`RANGO HORARIO`))]
View(prueba)
View(dt1)
prueba <- dt1[1:10000]
prueba$`RANGO HORARIO`[1]
class(prueba$`RANGO HORARIO`[1])
hms(prueba$`RANGO HORARIO`[1])
hms(prueba$`RANGO HORARIO`[1], quiet = FALSE)
hms(prueba$`RANGO HORARIO`[1], quiet = TRUE)
hms(prueba$`RANGO HORARIO`[10000], quiet = TRUE)
hms(dt1$`RANGO HORARIO`[10000], quiet = TRUE)
hms(dt1$`RANGO HORARIO`[100000], quiet = TRUE)
View(prueba)
prueba[,by = list(id, FECHA, hour(`RANGO HORARIO`))]
hour(prueba$`RANGO HORARIO`[1])
hour(hms(prueba$`RANGO HORARIO`[1]))
prueba[,`RANGO HORARIO`:= hms(`RANGO HORARIO`)]
media = prueba[,by = list(id, FECHA, hour(`RANGO HORARIO`))]
media = prueba[,.N,by = list(id, FECHA, hour(`RANGO HORARIO`))]
View(media)
prueba[order(id), c("int_med","v_med") := list(mean(intensidad), mean(vmed)), by= (seq(nrow(prueba)) - 1) %/% 4]
View(prueba)
media = prueba[,.N,by = list(id, FECHA, hour(`RANGO HORARIO`), int_med, v_med)]
View(media)
hour(prueba$`RANGO HORARIO`[1])
hour(prueba$`RANGO HORARIO`[2])
hour(prueba$`RANGO HORARIO`[3])
hour(prueba$`RANGO HORARIO`[53])
hour(prueba$`RANGO HORARIO`[3032])
View(prueba)
prueba[order(id)]
x = prueba[order(id)]
View(x)
prueba[order(id), c("int_med","v_med") = list(mean(intensidad), mean(vmed)), by= (seq(nrow(prueba)) - 1) %/% 4]
media = prueba[order(id), c("int_med","v_med") = list(mean(intensidad), mean(vmed)), by= (seq(nrow(prueba)) - 1) %/% 4]
media <- prueba[order(id), c("int_med","v_med") = list(mean(intensidad), mean(vmed)), by= (seq(nrow(prueba)) - 1) %/% 4]
media <- prueba[order(id), c("int_med","v_med") := list(mean(intensidad), mean(vmed)), by= (seq(nrow(prueba)) - 1) %/% 4]
prueba[, .N, by = list(id)]
prueba[, .N, by = list(id, hour(`RANGO HORARIO`))]
dim(dt)
dim(dt1)
dim(dt1)[1]
dim(dt1)[1]/4
x = dt1[order(id)]
View(x)
x[order(id), c("int_med","v_med") := list(mean(intensidad), mean(vmed)), by= (seq(nrow(prueba)) - 1) %/% 4]
x[order(id), c("int_med","v_med") := list(mean(intensidad), mean(vmed)), by= (seq(nrow(x)) - 1) %/% 4]
View(x)
x[, `RANGO HORARIO` := hms(`RANGO HORARIO`)]
x <- x[, .N, by = list(id, FECHA, hour(`RANGO HORARIO`), int_med, v_med)]
View(x)
View(x)
View(prueba)
media <- prueba[order(id), c("int_med","v_med") := list(mean(intensidad), mean(vmed)), by = list(FECHA, hour(`RANGO HORARIO`))]
View(prueba)
media <- prueba[order(id), .N, by = list(FECHA, hour(`RANGO HORARIO`))]
View(media)
media <- prueba[order(id), c("int_med","v_med") := list(mean(intensidad), mean(vmed)), by = list(id, FECHA, hour(`RANGO HORARIO`))]
View(media)
dt1[, `RANGO HORARIO` := hms(`RANGO HORARIO`)]
dt1[order(id), c("int_med","v_med") := list(mean(intensidad), mean(vmed)), by= list(id, FECHA, hour(`RANGO HORARIO`))]
x <- dt1[, .N, by = list(id, FECHA, hour(`RANGO HORARIO`), int_med, v_med)]
View(x)
dt1 <- dt1[, .N, by = list(id, FECHA, hour(`RANGO HORARIO`), int_med, v_med)]
1 <- prueba
"1" <- prueba
dt1[order(id), c("int_med","v_med") := list(mean(intensidad), mean(vmed)), by= list(id, FECHA, hour(`RANGO HORARIO`))]
"01-2018" <- dt1
save("01-2018", file = "../Accidentes de tráfico - Madrid/Cleaned_data/01-2018.RData")
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/01-2018.RData")
View(`01-2018`)
directorio = "../Accidentes de tráfico - Madrid/Raw_data"
año = "2018.csv"
dt1 = fread(paste(directorio, paste0("01-", año), sep = "/"))
library(data.table); library(lubridate)
dt1 = fread(paste(directorio, paste0("01-", año), sep = "/"))
dt1 <- dt1[!grepl("M-30", tipo_elem)]
dt1[, c("FECHA", "RANGO HORARIO") := tstrsplit(fecha, " ", fixed=TRUE)]
dt1[, fecha:=NULL]
dt1 <- dt1[, c(1,9,10,2,3,4,5,6,7,8)]
View(dt1)
dt1[, `RANGO HORARIO` := hms(`RANGO HORARIO`)]
View(dt1)
dt1[, c("int_med","v_med") := list(mean(intensidad), mean(vmed)), by= list(id, FECHA, hour(`RANGO HORARIO`))]
dt1[, c("int_med","v_med") := list(mean(intensidad), mean(vmed)), by= list(id, FECHA, hour(`RANGO HORARIO`))]
substr(x, start = 1, stop = 2)
substr(dt1$`RANGO HORARIO`[1], start = 1, stop = 2)
substr("00:00:00", start = 1, stop = 2)
substr("01:00:00", start = 1, stop = 2)
