geocoded[9143,3] = -3.627642
geocoded[24609,2] = 40.401331
geocoded[24609,3] = -3.698947
geocoded[25068,2] = 40.462593
geocoded[25068,3] = -3.624041
geocoded[16631,2] = 40.422282
geocoded[16631,3] = -3.612226
geocoded[25820,2] = 40.438588
geocoded[25820,3] = -3.652809
geocoded[2120,2] = 40.474669
geocoded[2120,3] = -3.677122
geocoded[449,2] = 40.446209
geocoded[449,3] = -3.690262
geocoded[6066,2] = 40.365239
geocoded[6066,3] = -3.702319
geocoded[30521,2] = 40.473125
geocoded[30521,3] = -3.648648
geocoded[22903,2] = 40.470669
geocoded[22903,3] = -3.717519
geocoded[28705,2] = 40.469435
geocoded[28705,3] = -3.80365
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
geocoded[30714,2] = 40.426318
geocoded[30714,2] = 40.426318
View(geocoded)
geocoded[30714,3] = -3.712585
geocoded[26192,2] = 40.462267
geocoded[26192,3] = -3.708518
geocoded[19491,2] = 40.471735
geocoded[19491,3] = -3.722424
geocoded[16448,2] = 40.457770
geocoded[16448,3] = -3.595760
geocoded[23827,2] = 40.463269
geocoded[23827,3] = -3.620049
geocoded[12482,2] = 40.463269
geocoded[12482,3] = -3.620049
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
View(geocoded)
geocoded[29206,2] = 40.513644
View(geocoded)
geocoded[29206,3] = -8.545448
geocoded[29206,3] = -3.664190
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
save(geocoded, file = "../Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
View(geocoded)
Geocoded <- geocoded
save(Geocoded, file = "../Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
View(Geocoded)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
unique(Accidentalidad[,by = list(`LUGAR ACCIDENTE`, Nº)])
Accidentalidad[,by = list(`LUGAR ACCIDENTE`, Nº)]
Accidentalidad[`LUGAR ACCIDENTE`, Nº]
Accidentalidad[`LUGAR ACCIDENTE`& Nº]
Accidentalidad[`LUGAR ACCIDENTE` & Nº]
unique(cbind(Accidentalidad$`LUGAR ACCIDENTE`, Accidentalidad$Nº))
prueba <- unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$Nº))
prueba <- unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$Nº))
Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]
View(Accidentalidad)
Accidentalidad$`LUGAR ACCIDENTE`[!grepl("AUTOVIA")]
Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`),]
Accidentalidad[!grepl("AUTOVIA", Accidentalidad$`LUGAR ACCIDENTE`)]
!grepl("AUTOVIA", Accidentalidad$`LUGAR ACCIDENTE`)
Accidentalidad[!grepl("AUTOVIA", Accidentalidad$`LUGAR ACCIDENTE`)]
Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0 , paste(`LUGAR ACCIDENTE`, Nº, "MADRID")]
library(data.table)
prueba <- unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$Nº))
prueba <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$Nº)))
View(prueba)
View(Geocoded)
prueba1 <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) Nº != 0]$Nº)))
prueba1 <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
prueba1 <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
prueba1 <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
prueba2 <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
prueba <- rbind(prueba1, prueba2)
View(prueba)
View(Geocoded)
pruebabis <- cbind(prueba, Geocoded$lat, Geocoded$lon)
View(pruebabis)
prueba1 <- data.table(unique(cbind("Ey" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
View(prueba1)
rm(list = ls())
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
aux1 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
aux2 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
aux <- rbind(aux1, aux2)
datasetToMerge <- cbind(aux, Geocoded$lat, Geocoded$lon)
View(datasetToMerge)
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"))
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"), all = TRUE)
datasetToMerge[, Nº := as.numeric(Nº)]
View(datasetToMerge)
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"), all = TRUE)
View(prueba)
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"), all = TRUE, sort = FALSE)
View(prueba)
join(Accidentalidad, datasetToMerge)
prueba <- setDT(Accidentalidad)[datasetToMerge, on=c("LUGAR ACCIDENTE", "Nº")]
View(prueba)
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"), sort = FALSE)
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"), all = TRUE, sort = FALSE)
View(prueba)
library(plyr)
join(Accidentalidad, datasetToMerge)
prueba <- join(Accidentalidad, datasetToMerge)
View(prueba)
identical(prueba$FECHA, Accidentalidad$FECHA)
identical(prueba$FECHA, Accidentalidad$`LUGAR ACCIDENTE`)
identical(prueba$`LUGAR ACCIDENTE`, Accidentalidad$`LUGAR ACCIDENTE`)
identical(prueba$`LUGAR ACCIDENTE`, Accidentalidad$`LUGAR ACCIDENTE`)
rm(list = ls())
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
# Para comprobar que dos columnas son enteras iguales (por ejemplo GeoAccidentalidad y Accidentalidad), se puede hacer
# identical(Accidentalidad$`LUGAR ACCIDENTE`, GeoAccidentalidad$`LUGAR ACCIDENTE`)
aux1 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
aux2 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
aux <- rbind(aux1, aux2)
dirGeolocalizadas <- cbind(aux, Geocoded$lat, Geocoded$lon)
GeoAccidentalidad <- join(Accidentalidad, dirGeolocalizadas)
save(GeoAccidentalidad, file = "../Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
View(GeoAccidentalidad)
View(Accidentalidad)
View(Geocoded)
View(aux2)
View(dirGeolocalizadas)
View(Geocoded)
aux1 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
aux2 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
aux <- rbind(aux1, aux2)
dirGeolocalizadas <- cbind(aux, "lat" = Geocoded$lat, "lon" = Geocoded$lon)
GeoAccidentalidad <- join(Accidentalidad, dirGeolocalizadas)
save(GeoAccidentalidad, file = "../Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
View(GeoAccidentalidad)
View(dirGeolocalizadas)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
View(GeoAccidentalidad)
library(ggmap)
register_google(key = "AIzaSyBo4vW2UT8J5SjT88n3kqHN3e9t76ZUkmg")
library(dplyr)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
df = sample_n(df[,27:28], 50)
df = sample_n(GeoAccidentalidad[,27:28], 50)
View(df)
MadridMap <- qmap("Madrid", zoom = 14, color = "bw")
HoustonMap +
geom_point(aes(x = lon, y = lat), data = df, size = 1)
MadridMap +
geom_point(aes(x = lon, y = lat), data = df, size = 1)
MadridMap +
geom_point(aes(x = lon, y = lat), data = df, size = 2)
MadridMap +
geom_point(aes(x = lon, y = lat), data = df, size = 3)
MadridMap <- qmap("Madrid", zoom = 10, color = "bw")
MadridMap +
geom_point(aes(x = lon, y = lat), data = df, size = 3)
MadridMap <- qmap("Madrid", zoom = 12, color = "bw")
MadridMap +
geom_point(aes(x = lon, y = lat), data = df, size = 3)
df = sample_n(GeoAccidentalidad, 50)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = LESIVIDAD), data = df, size = 3)
df = sample_n(GeoAccidentalidad, 200)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = LESIVIDAD), data = df, size = 3)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = LESIVIDAD), data = df, size = 3)
MadridMap <- qmap("Madrid", zoom = 11, color = "bw")
register_google(key = "AIzaSyBo4vW2UT8J5SjT88n3kqHN3e9t76ZUkmg")
MadridMap <- qmap("Madrid", zoom = 11, color = "bw")
MadridMap +
geom_point(aes(x = lon, y = lat, colour = LESIVIDAD), data = df, size = 3)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = `TIPO VEHICULO`), data = df, size = 3)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = `Tipo Vehiculo`), data = df, size = 3)
MadridMap <- qmap("Madrid", zoom = 15, color = "bw")
register_google(key = "AIzaSyBo4vW2UT8J5SjT88n3kqHN3e9t76ZUkmg")
MadridMap <- qmap("Madrid", zoom = 15, color = "bw")
MadridMap +
geom_point(aes(x = lon, y = lat, colour = SEXO), data = df, size = 3)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = SEXO), data = df, size = 4)
data(columbus, package="spData")
install.packages(c("arules", "backports", "BH", "broom", "callr", "caret", "clipr", "colorspace", "cowplot", "curl", "data.table", "ddalpha", "dendextend", "dimRed", "gbm", "ggpubr", "git2r", "haven", "httpuv", "ipred", "knitr", "lava", "lme4", "markdown", "mclust", "ModelMetrics", "openssl", "prabclus", "processx", "ps", "quantreg", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "rio", "rlang", "rstudioapi", "sfsmisc", "shiny", "tibble", "tidyr"))
install.packages("spData")
library(spData)
columbus
prueba = columbus
View(prueba)
install.packages("spgwr")
library(spgwr)
col.lm <- lm(CRIME ~ INC + HOVAL, data=columbus)
summary(col.lm)
col.bw <- gwr.sel(CRIME ~ INC + HOVAL, da
)
col.lm <- lm(CRIME ~ INC + HOVAL, data=columbus)
summary(col.lm)
col.bw <- gwr.sel(CRIME ~ INC + HOVAL, data = columus)
summary(col.bw)
col.lm <- lm(CRIME ~ INC + HOVAL, data=columbus)
summary(col.lm)
col.bw <- gwr.sel(CRIME ~ INC + HOVAL,data=columbus,
coords=cbind(columbus$X, columbus$Y))
View(col.lm)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
col.lm <- lm(CRIME ~ INC + HOVAL, data=columbus)
summary(col.lm)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
na.omit(GeoAccidentalidad)
GeoAccidentalidad = na.omit(GeoAccidentalidad)
col.lm <- lm(CRIME ~ INC + HOVAL, data=columbus)
summary(col.lm)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
library(dplyr)
GeoAccidentalidad = sample_n(GeoAccidentalidad, 10000)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
col.bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
col.bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
col.bw
GeoAccidentalidad = sample_n(GeoAccidentalidad, 1000)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), bandwith = col.bw)
bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), bandwidth = col.bw)
bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), bandwidth = col.bw)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), gweight = gwr.Gauss,
+ verbose = FALSE)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), gweight = gwr.Gauss,
verbose = FALSE)
bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), bandwidth = col.bw)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
col.lm <- lm(CLESIVIDAD ~ DISTRITO + SEXO, data=GeoAccidentalidad)
col.lm <- lm(LESIVIDAD ~ DISTRITO + SEXO, data=GeoAccidentalidad)
GeoAccidentalidad = na.omit(GeoAccidentalidad)
col.lm <- lm(LESIVIDAD ~ DISTRITO + SEXO, data=GeoAccidentalidad)
View(col.lm)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
library(data.table)
Accidentalidad[, by = SEXO]
prueba <- Accidentalidad[, by = SEXO]
View(prueba)
prueba <- Accidentalidad[, mean(`Nº VICTIMAS *`), by = SEXO]
Accidentalidad[, mean(`Nº VICTIMAS *`), by = SEXO]
Accidentalidad[, mean(.SD), by = SEXO]
Accidentalidad[, print(.SD), by = SEXO]
Accidentalidad[, .N, by = SEXO]
Accidentalidad[, .N, by = list(SEXO, VEHICULO)]
Accidentalidad[, .N, by = list(SEXO, `Tipo Vehiculo`)]
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
library(data.table)
View(GeoAccidentalidad)
prueba <- GeoAccidentalidad[,FECHA := ]
library(lubridate)
dmy(GeoAccidentalidad$FECHA[249300])
prueba <- GeoAccidentalidad[,FECHA := dmy(FECHA)]
prueba$FECHA[1]
View(prueba)
day(prueba$FECHA[1])
month(prueba$FECHA[1])
year(prueba$FECHA[1])
prueba[,N, by = list(year(FECHA))]
prueba[,.N, by = list(year(FECHA))]
prueba[,.N, by = list(month(FECHA))]
prueba[,.N, by = list(day(FECHA))]
prueba[,.N, by = list(year(FECHA))]
prueba$`RANGO HORARIO`[1]
h(prueba$`RANGO HORARIO`[1])
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
df <- within(GeoAccidentalidad[1:1000], {
grp.x = cut(lat, (0:3)/3, labels = FALSE)
grp.y = cut(lon, (0:3)/3, labels = FALSE)
})
GeoAccidentalidad[1:10]
GeoAccidentalidad[1:10]$lat
GeoAccidentalidad[1:10]$lon
GeoAccidentalidad[1:10]$LESIVIDAD
GeoAccidentalidad$LESIVIDAD
GeoAccidentalidad[,1:10]$LESIVIDAD
GeoAccidentalidad[,1:10]
GeoAccidentalidad[1:10]
GeoAccidentalidad[1:10,]
df <- within(GeoAccidentalidad[1:1000,], {
grp.x = cut(lat, (0:3)/3, labels = FALSE)
grp.y = cut(lon, (0:3)/3, labels = FALSE)
})
View(df)
cut(GeoAccidentalidad$lon[1:10,])
GeoAccidentalidad$lon[1:10,]
GeoAccidentalidad[1:10, ]$lon
x <- na.omit(GeoAccidentalidad)
x$lon[1:10,]
x[1:10,]$lon
cut(x[1:10,]$lon)
cut(x[1:10,]$lon, 2)
cut(x[1:10,]$lon, 5)
df <- within(x[1:1000,], {
grp.x = cut(lat, 10, labels = FALSE)
grp.y = cut(lon, 10, labels = FALSE)
})
View(df)
cut(x[1:10,]$lon, 5, dig.lab = min(nchar(breaks1))
)
cut(x[1:10,]$lon, 5, dig.lab = min(nchar(5)))
df <- within(x[1:1000,], {
grp.x = cut(lat, 10, dig.lab = min(nchar(10)), labels = FALSE)
grp.y = cut(lon, 10, dig.lab = min(nchar(10)), labels = FALSE)
})
View(df)
df <- x[1:100,]
View(x)
x <- data.table(na.omit(GeoAccidentalidad))
library(data.table)
x <- data.table(na.omit(GeoAccidentalidad))
df <- x[1:100,]
library(sp)
class(x)
spsample(x, n=10, type="random")
df <- df[lon & lat]
View(df)
df <- data.table(df$lat, df$lon)
View(df)
spsample(df, n=10, type="random")
coordinates(df)
df <- coordinates(df)
df
class(df)
spsample(df, n=10, type="random")
df <- data.table(x[1:100,]$lat, x[1:100,]$lon)
p <- SpatialPolygons(df)
p <- coordinates(df)
p <- SpatialPolygons(p)
coor <- coordinates(df)
coor[0,0]
coor[1,1]
coor[1,2]
coor[2,2]
coor[2,1]
p <- Polygon(coor)
p
class(p)
p <- SpatialPolygons(p)
spsample(p, n=300, type="random")
spsample(p, n=10, type="random")
prueba <- spsample(p, n=10, type="random")
prueba <- SpatialPointsDataFrame(prueba, data.frame(id=1:10))
View(prueba)
proj4string(prueba)
plot(prueba)
plot(p)
p <- SpatialPointsDataFrame(p, data.frame(id=1:100))
p <- SpatialPointsDataFrame(p, data.frame(id=1:101))
View(p)
plot(p)
over(prueba, p)
poi <- data.frame(x=c(919500, 959500, 1019500, 1049500, 1029500, 989500),
y=c(130600, 150600, 180600, 198000, 248000, 218000),
id="A", stringsAsFactors=F)
coordinates(poi) <- ~ x + y
proj4string(poi) <- proj4string(shp)
View(poi)
View(df)
coordinates(p)
coordinates(df)
coordinates(df) <- ~ x + y
coordinates(df) <- ~ lon + lat
View(df)
coordinates(df) <- ~ V1 + V2
plot(df)
shp <- readOGR("nybb_13a", "nybb")
install.packages("rgdal")
shp <- readOGR("nybb_13a", "nybb")
library(rgdal)
install.packages("rgdal")
library(rgdal)
proj4string(df)
start_lat <- 100
start_lng <- 0
griddf <- expand.grid(latcoords = seq(from = start_lat, by = -10, l = 5),
lngcoords = seq(from = start_lng, by = -10, l = 5))
View(griddf)
start_lat <- 40
start_lng <- -3.8
griddf <- expand.grid(latcoords = seq(from = start_lat, by = -0.001, l = 5),
lngcoords = seq(from = start_lng, by = -0.001, l = 5))
df2 <- within(df, {
grp.lat = cut(lat, 3, labels = FALSE)
grp.lon = cut(lon, 3, labels = FALSE)
})
head(df2)
#Want the minimum lon value for which grp.lon = 1 and the maximum lon value for which grp.lon=1
start_grp1_lon <- min(df2$lon[df2$grp.lon==1])
start_grp2_lon <- min(df2$lon[df2$grp.lon==2])
start_grp3_lon <- min(df2$lon[df2$grp.lon==3])
start_grp1_lat <- min(df2$lat[df2$grp.lat==1])
start_grp2_lat <- min(df2$lat[df2$grp.lat==2])
start_grp3_lat <- min(df2$lat[df2$grp.lat==3])
plot(lat ~ lon, data = df2, pch = (15:23)[grp.lon*grp.lat], col=[grp.lon]) #pch = (15:17)[grp.lon], col = grp.lat)
abline(v = c(start_grp1_lon, start_grp2_lon, start_grp3_lon))
abline(h = c(start_grp1_lat, start_grp2_lat, start_grp3_lat))
df <- data.table(x[1:100,]$lat, x[1:100,]$lon)
df2 <- within(df, {
grp.lat = cut(lat, 3, labels = FALSE)
grp.lon = cut(lon, 3, labels = FALSE)
})
head(df2)
#Want the minimum lon value for which grp.lon = 1 and the maximum lon value for which grp.lon=1
start_grp1_lon <- min(df2$lon[df2$grp.lon==1])
start_grp2_lon <- min(df2$lon[df2$grp.lon==2])
start_grp3_lon <- min(df2$lon[df2$grp.lon==3])
start_grp1_lat <- min(df2$lat[df2$grp.lat==1])
start_grp2_lat <- min(df2$lat[df2$grp.lat==2])
start_grp3_lat <- min(df2$lat[df2$grp.lat==3])
plot(lat ~ lon, data = df2, pch = (15:23)[grp.lon*grp.lat], col=[grp.lon]) #pch = (15:17)[grp.lon], col = grp.lat)
abline(v = c(start_grp1_lon, start_grp2_lon, start_grp3_lon))
abline(h = c(start_grp1_lat, start_grp2_lat, start_grp3_lat))
df2 <- within(df, {
grp.lat = cut(lat, 3, labels = FALSE)
grp.lon = cut(lon, 3, labels = FALSE)
})
head(df2)
df2 <- within(df, {
grp.lat = cut(V1, 3, labels = FALSE)
grp.lon = cut(V2, 3, labels = FALSE)
})
head(df2)
View(df2)
start_grp1_lon <- min(df2$lon[df2$grp.lon==1])
start_grp2_lon <- min(df2$lon[df2$grp.lon==2])
start_grp3_lon <- min(df2$lon[df2$grp.lon==3])
start_grp1_lat <- min(df2$lat[df2$grp.lat==1])
start_grp2_lat <- min(df2$lat[df2$grp.lat==2])
start_grp3_lat <- min(df2$lat[df2$grp.lat==3])
plot(lat ~ lon, data = df2, pch = (15:23)[grp.lon*grp.lat], col=[grp.lon]) #pch = (15:17)[grp.lon], col = grp.lat)
abline(v = c(start_grp1_lon, start_grp2_lon, start_grp3_lon))
abline(h = c(start_grp1_lat, start_grp2_lat, start_grp3_lat))
start_grp1_lon <- min(df2$lon[df2$grp.lon==1])
start_grp2_lon <- min(df2$lon[df2$grp.lon==2])
start_grp3_lon <- min(df2$lon[df2$grp.lon==3])
start_grp1_lat <- min(df2$lat[df2$grp.lat==1])
start_grp2_lat <- min(df2$lat[df2$grp.lat==2])
start_grp3_lat <- min(df2$lat[df2$grp.lat==3])
plot(lat ~ lon, data = df2, pch = (15:23)[grp.lon*grp.lat], col=[grp.lon]) #pch = (15:17)[grp.lon], col = grp.lat)
abline(v = c(start_grp1_lon, start_grp2_lon, start_grp3_lon))
abline(h = c(start_grp1_lat, start_grp2_lat, start_grp3_lat))
colnames(df2$V1 = "lon")
colnames(df2$V1) = "lon"
colnames(df2) = c("lon", "lat")
colnames(df2)[1:2] = c("lon", "lat")
start_grp1_lon <- min(df2$lon[df2$grp.lon==1])
start_grp2_lon <- min(df2$lon[df2$grp.lon==2])
start_grp3_lon <- min(df2$lon[df2$grp.lon==3])
start_grp1_lat <- min(df2$lat[df2$grp.lat==1])
start_grp2_lat <- min(df2$lat[df2$grp.lat==2])
start_grp3_lat <- min(df2$lat[df2$grp.lat==3])
plot(lat ~ lon, data = df2, pch = (15:23)[grp.lon*grp.lat], col=[grp.lon]) #pch = (15:17)[grp.lon], col = grp.lat)
abline(v = c(start_grp1_lon, start_grp2_lon, start_grp3_lon))
abline(h = c(start_grp1_lat, start_grp2_lat, start_grp3_lat))
start_grp1_lon <- min(df2$lon[df2$grp.lon==1])
start_grp2_lon <- min(df2$lon[df2$grp.lon==2])
start_grp3_lon <- min(df2$lon[df2$grp.lon==3])
start_grp1_lat <- min(df2$lat[df2$grp.lat==1])
start_grp2_lat <- min(df2$lat[df2$grp.lat==2])
start_grp3_lat <- min(df2$lat[df2$grp.lat==3])
plot(lat ~ lon, data = df2)
abline(v = c(start_grp1_lon, start_grp2_lon, start_grp3_lon))
abline(h = c(start_grp1_lat, start_grp2_lat, start_grp3_lat))
df <- structure(list(LAT = c(35.61226, 35.34986, 35.17794, 34.60425,34.40356, 33.94433, 33.41834, 16.89566, 16.89561, 16.89561),
LON = c(-9.604802, -9.803048, -9.921968, -10.30782, -10.44971,-10.76656, -11.13053, -24.99776, -24.99788, -24.99773)),
.Names = c("LAT","LON"), class = "data.frame", row.names = c(1L, 2L, 3L, 4L, 5L,6L, 7L, 44161L, 44162L, 44163L))
View(df)
library(sp)
dfSp <- SpatialPointsDataFrame(matrix(c(df$LON, df$LAT), nrow = nrow(df)), data = df)
View(dfSp)
grid <- makegrid(dfSp, n = 20)
gridSp <- SpatialPointsDataFrame(grid, data = data.frame(id = rownames(grid)))
View(grid)
library(raster)
gridSpRas <- rasterFromXYZ(gridSp)
gridPoly <- rasterToPolygons(gridSpRas, dissolve = T)
install.packages("raster")
library(raster)
gridSpRas <- rasterFromXYZ(gridSp)
gridPoly <- rasterToPolygons(gridSpRas, dissolve = T)
plot(gridPoly)
points(dfSp, col = "red", pch = "+")
gridPoly$count <- unlist(lapply(1:length(gridPoly),
function (x) {length(dfSp[gridPoly[x, ], ])}))
spplot(gridPoly, zcol = "count")
