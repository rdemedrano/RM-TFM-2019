beep()
View(direcciones)
View(geocoded22)
ptm <- proc.time()
geocoded23 <- geocode(direcciones$Direcciones[22001:23000])
write.csv(geocoded23, file = "geocoded23.csv")
proc.time() - ptm
beep()
View(geocoded21)
View(geocoded22)
View(geocoded23)
library(data.table); library(ggmap); library(beepr)
load("../Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
register_google(key = "AIzaSyBo4vW2UT8J5SjT88n3kqHN3e9t76ZUkmg")
# La idea es quedarse con aquellas direcciones (que son LUGAR ACCIDENTE + Nº) tales que no contengan la palabra
# autovía (grepl devuelve TRUE si sí está contenida). Por supuesto, no queremos repetidas (unique).
# Para que no haya ninguna duda, se añade al final de cada dirección MADRID.
# EN LOS CRUCES NO SE DEBE PONEREL NUMERO, O SI NO GEOLOCALIZARÁ MAL.
dir1 <- data.table("Direcciones" = unique(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0 , paste(`LUGAR ACCIDENTE`, Nº, "MADRID")]))
dir2 <- data.table("Direcciones" = unique(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0 , paste(`LUGAR ACCIDENTE`, "MADRID")]))
# direcciones <- data.table("Direcciones" = unique(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) , paste(`LUGAR ACCIDENTE`, Nº, "MADRID")]))
direcciones <- rbind(dir1, dir2)
ptm <- proc.time()
geocoded24 <- geocode(direcciones$Direcciones[23001:24000])
write.csv(geocoded24, file = "geocoded24.csv")
proc.time() - ptm
beep()
ptm <- proc.time()
geocoded25 <- geocode(direcciones$Direcciones[24001:25000])
write.csv(geocoded25, file = "geocoded25.csv")
proc.time() - ptm
beep()
ptm <- proc.time()
geocoded26 <- geocode(direcciones$Direcciones[25001:26000])
write.csv(geocoded26, file = "geocoded26.csv")
proc.time() - ptm
beep()
View(geocoded24)
View(direcciones)
View(geocoded25)
View(geocoded26)
library(data.table); library(ggmap); library(beepr)
load("../Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
register_google(key = "AIzaSyBo4vW2UT8J5SjT88n3kqHN3e9t76ZUkmg")
# La idea es quedarse con aquellas direcciones (que son LUGAR ACCIDENTE + Nº) tales que no contengan la palabra
# autovía (grepl devuelve TRUE si sí está contenida). Por supuesto, no queremos repetidas (unique).
# Para que no haya ninguna duda, se añade al final de cada dirección MADRID.
# EN LOS CRUCES NO SE DEBE PONEREL NUMERO, O SI NO GEOLOCALIZARÁ MAL.
dir1 <- data.table("Direcciones" = unique(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0 , paste(`LUGAR ACCIDENTE`, Nº, "MADRID")]))
dir2 <- data.table("Direcciones" = unique(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0 , paste(`LUGAR ACCIDENTE`, "MADRID")]))
# direcciones <- data.table("Direcciones" = unique(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) , paste(`LUGAR ACCIDENTE`, Nº, "MADRID")]))
direcciones <- rbind(dir1, dir2)
ptm <- proc.time()
geocoded27 <- geocode(direcciones$Direcciones[26001:27000])
write.csv(geocoded27, file = "geocoded27.csv")
proc.time() - ptm
beep()
ptm <- proc.time()
geocoded28 <- geocode(direcciones$Direcciones[27001:28000])
write.csv(geocoded28, file = "geocoded28.csv")
proc.time() - ptm
beep()
ptm <- proc.time()
geocoded29 <- geocode(direcciones$Direcciones[28001:29000])
write.csv(geocoded29, file = "geocoded29.csv")
proc.time() - ptm
beep()
View(direcciones)
View(geocoded27)
View(geocoded28)
View(geocoded29)
View(geocoded29)
library(data.table); library(ggmap); library(beepr)
load("../Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
register_google(key = "AIzaSyBo4vW2UT8J5SjT88n3kqHN3e9t76ZUkmg")
# La idea es quedarse con aquellas direcciones (que son LUGAR ACCIDENTE + Nº) tales que no contengan la palabra
# autovía (grepl devuelve TRUE si sí está contenida). Por supuesto, no queremos repetidas (unique).
# Para que no haya ninguna duda, se añade al final de cada dirección MADRID.
# EN LOS CRUCES NO SE DEBE PONEREL NUMERO, O SI NO GEOLOCALIZARÁ MAL.
dir1 <- data.table("Direcciones" = unique(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0 , paste(`LUGAR ACCIDENTE`, Nº, "MADRID")]))
dir2 <- data.table("Direcciones" = unique(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0 , paste(`LUGAR ACCIDENTE`, "MADRID")]))
# direcciones <- data.table("Direcciones" = unique(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) , paste(`LUGAR ACCIDENTE`, Nº, "MADRID")]))
direcciones <- rbind(dir1, dir2)
geocoded <- fread("../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
View(geocoded)
# # 1. Lista de archivos a juntar.
# filenames = c("geocoded1.csv","geocoded2.csv","geocoded3.csv","geocoded4.csv","geocoded5.csv","geocoded6.csv","geocoded7.csv","geocoded8.csv","geocoded9.csv","geocoded10.csv",
#               "geocoded11.csv","geocoded12.csv","geocoded13.csv","geocoded14.csv","geocoded15.csv","geocoded16.csv","geocoded17.csv","geocoded18.csv","geocoded19.csv","geocoded20.csv",
#               "geocoded21.csv","geocoded22.csv","geocoded23.csv","geocoded24.csv","geocoded25.csv","geocoded26.csv","geocoded27.csv","geocoded28.csv","geocoded29.csv","geocoded30.csv",
#               "geocoded31.csv")
# # 2. Se crea el data.table que se crearía al hacer la geocodificación de una. Es un rbind pero cargando a la vez los archivos.
# geocoded <- rbindlist(lapply(filenames, fread))
# # 3. Se elimina una columna rara que se autogenera
geocoded <- geocoded[,-1]
View(geocoded)
geocoded[26053,2]
geocoded[26053,2] = 40.426497
geocoded[26053,3] = -3.687664
geocoded[18579,2] = 40.426497
geocoded[18579,3] = -3.687664
geocoded[9129,2] = 40.448825
geocoded[9129,3] = -3.683194
geocoded[25308,2] = 40.426289
geocoded[25308,3] = -3.672482
# geocoded <- rbindlist(lapply(filenames, fread))
# # 3. Se elimina una columna rara que se autogenera
# geocoded <- geocoded[,-1]
# # 4. Se cambia el orden de las columnas, porque lo habitual es tener primero longitud y luego latitud. Guardamos por si acaso.
# geocoded <- setcolorder(geocoded,order(c(2,1)))
# # 5. Se supone que están ordenados, así que se juntan con direcciones.
# geocoded <- cbind(direcciones, geocoded)
# 6. Una vez que se comprueba que están ordenados, no veo otra que aquellas direcciones que no salen o estan mal, meterlas
# a mano. Para ello te recomiendo cambiar la forma de ordenar el data.table por lon y lat, de forma que automáticamente salen
# en primeras posiciones valores anómalos.
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
prueba <- fread("../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
View(prueba)
geocoded[24280,2] = 40.475676
geocoded[24280,3] = -3.647149
geocoded[23129,2] = 40.366705
geocoded[23129,3] = -3.586116
geocoded[23733,2] = 40.481801
geocoded[23733,3] = -3.649929
geocoded[23944,2] = 40.349598
geocoded[23944,3] = -3.571988
geocoded[28199,2] = 40.349598
geocoded[28199,3] = -3.571988
geocoded[28773,2] = 40.349598
geocoded[28773,3] = -3.571988
# geocoded <- rbindlist(lapply(filenames, fread))
# # 3. Se elimina una columna rara que se autogenera
# geocoded <- geocoded[,-1]
# # 4. Se cambia el orden de las columnas, porque lo habitual es tener primero longitud y luego latitud. Guardamos por si acaso.
# geocoded <- setcolorder(geocoded,order(c(2,1)))
# # 5. Se supone que están ordenados, así que se juntan con direcciones.
# geocoded <- cbind(direcciones, geocoded)
# 6. Una vez que se comprueba que están ordenados, no veo otra que aquellas direcciones que no salen o estan mal, meterlas
# a mano. Para ello te recomiendo cambiar la forma de ordenar el data.table por lon y lat, de forma que automáticamente salen
# en primeras posiciones valores anómalos.
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
prueba <- fread("../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
View(prueba)
which(is.na(geocoded))
which(is.na(geocoded[2]))
which(is.na(geocoded[,2]))
which(is.na(geocoded[,3]))
geocoded[26568,2] = 40.452450
geocoded[26568,3] = -3.668725
which(is.na(geocoded[,3]))
geocoded[26792,2] = 40.400070
geocoded[26792,3] = -3.717275
geocoded[27001,2] = 40.434982
geocoded[27001,3] = -3.608782
geocoded[27540,2] = 40.481017
geocoded[27540,3] = -3.709506
geocoded[28177,2] = 40.453106
geocoded[28177,3] = -3.594450
geocoded[28339,2] = 40.412320
geocoded[28339,3] = -3.653980
geocoded[28982,2] = 40.488545
geocoded[28982,3] = -3.718937
geocoded[30717,2] = 40.470112
geocoded[30717,3] = -3.602160
geocoded[30839,3] = -3.704471
geocoded[30839,2] = 40.451154
View(geocoded)
which(is.na(geocoded[,3]))
# geocoded <- rbindlist(lapply(filenames, fread))
# # 3. Se elimina una columna rara que se autogenera
# geocoded <- geocoded[,-1]
# # 4. Se cambia el orden de las columnas, porque lo habitual es tener primero longitud y luego latitud. Guardamos por si acaso.
# geocoded <- setcolorder(geocoded,order(c(2,1)))
# # 5. Se supone que están ordenados, así que se juntan con direcciones.
# geocoded <- cbind(direcciones, geocoded)
# 6. Una vez que se comprueba que están ordenados, no veo otra que aquellas direcciones que no salen o estan mal, meterlas
# a mano. Para ello te recomiendo cambiar la forma de ordenar el data.table por lon y lat, de forma que automáticamente salen
# en primeras posiciones valores anómalos.
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
geocodificiación
# geocoded <- geocode(direcciones$Direcciones)
# # 2. Se cambia el o
which(is.na(geocoded[,2]))
geocoded[1112,2] = 40.362161
geocoded[1112,3] = -3.690691
geocoded[1893,2] = 40.437924
geocoded[1893,3] = -3.690096
geocoded[3541,2] = 40.437979
geocoded[3541,3] = -3.688139
geocoded[4027,2] = 40.430525
geocoded[4027,3] = -3.641681
geocoded[8117,2] = 40.460341
geocoded[8117,3] = -3.784595
which(is.na(geocoded[,2]))
geocoded[3977,2] = 40.390411
geocoded[3977,3] = -3.751615
geocoded[12549,2] = 40.336665
geocoded[12549,3] = -3.711109
geocoded[12210,2] = 40.450745
geocoded[12210,3] = -3.698238
geocoded[14728,2] = 40.381073
geocoded[14728,3] = -3.726034
geocoded[14906,2] = 40.436199
geocoded[14906,3] = -3.702530
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
which(is.na(geocoded[,2]))
geocoded[14970,2] = 40.408215
geocoded[14970,3] = -3.601490
geocoded[12131]
geocoded[18541,2] = 40.41897
geocoded[18541,3] = -3.627717
geocoded[29726,2] = 40.518272
geocoded[29726,3] = -3.77342
which(is.na(geocoded[,2]))
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
View(geocoded)
geocode("CALLE DEL MAR NEGRO NUM 7 MADRID")
geocode("CALLE DEL MAR NEGRO NUM 7")
geocoded[1498,2] = 40.473862
geocoded[1498,3] = -3.643931
geocoded[9143,2] = 40.409268
geocoded[9143,3] = -3.627642
geocoded[24609,2] = 40.401331
geocoded[24609,3] = -3.698947
geocoded[25068,2] = 40.462593
geocoded[25068,3] = -3.624041
geocoded[16631,2] = 40.422282
geocoded[16631,3] = -3.612226
geocoded[25820,2] = 40.438588
geocoded[25820,3] = -3.652809
geocoded[2120,2] = 40.474669
geocoded[2120,3] = -3.677122
geocoded[449,2] = 40.446209
geocoded[449,3] = -3.690262
geocoded[6066,2] = 40.365239
geocoded[6066,3] = -3.702319
geocoded[30521,2] = 40.473125
geocoded[30521,3] = -3.648648
geocoded[22903,2] = 40.470669
geocoded[22903,3] = -3.717519
geocoded[28705,2] = 40.469435
geocoded[28705,3] = -3.80365
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
geocoded[30714,2] = 40.426318
geocoded[30714,2] = 40.426318
View(geocoded)
geocoded[30714,3] = -3.712585
geocoded[26192,2] = 40.462267
geocoded[26192,3] = -3.708518
geocoded[19491,2] = 40.471735
geocoded[19491,3] = -3.722424
geocoded[16448,2] = 40.457770
geocoded[16448,3] = -3.595760
geocoded[23827,2] = 40.463269
geocoded[23827,3] = -3.620049
geocoded[12482,2] = 40.463269
geocoded[12482,3] = -3.620049
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
View(geocoded)
geocoded[29206,2] = 40.513644
View(geocoded)
geocoded[29206,3] = -8.545448
geocoded[29206,3] = -3.664190
write.csv(geocoded, file = "../Accidentes de tráfico - Madrid/Raw_data/geocoded.csv")
save(geocoded, file = "../Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
View(geocoded)
Geocoded <- geocoded
save(Geocoded, file = "../Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
View(Geocoded)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
unique(Accidentalidad[,by = list(`LUGAR ACCIDENTE`, Nº)])
Accidentalidad[,by = list(`LUGAR ACCIDENTE`, Nº)]
Accidentalidad[`LUGAR ACCIDENTE`, Nº]
Accidentalidad[`LUGAR ACCIDENTE`& Nº]
Accidentalidad[`LUGAR ACCIDENTE` & Nº]
unique(cbind(Accidentalidad$`LUGAR ACCIDENTE`, Accidentalidad$Nº))
prueba <- unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$Nº))
prueba <- unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$Nº))
Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]
View(Accidentalidad)
Accidentalidad$`LUGAR ACCIDENTE`[!grepl("AUTOVIA")]
Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`),]
Accidentalidad[!grepl("AUTOVIA", Accidentalidad$`LUGAR ACCIDENTE`)]
!grepl("AUTOVIA", Accidentalidad$`LUGAR ACCIDENTE`)
Accidentalidad[!grepl("AUTOVIA", Accidentalidad$`LUGAR ACCIDENTE`)]
Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0 , paste(`LUGAR ACCIDENTE`, Nº, "MADRID")]
library(data.table)
prueba <- unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$Nº))
prueba <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`)]$Nº)))
View(prueba)
View(Geocoded)
prueba1 <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) Nº != 0]$Nº)))
prueba1 <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
prueba1 <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
prueba1 <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
prueba2 <- data.table(unique(cbind(Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
prueba <- rbind(prueba1, prueba2)
View(prueba)
View(Geocoded)
pruebabis <- cbind(prueba, Geocoded$lat, Geocoded$lon)
View(pruebabis)
prueba1 <- data.table(unique(cbind("Ey" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`, Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
View(prueba1)
rm(list = ls())
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
aux1 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
aux2 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
aux <- rbind(aux1, aux2)
datasetToMerge <- cbind(aux, Geocoded$lat, Geocoded$lon)
View(datasetToMerge)
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"))
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"), all = TRUE)
datasetToMerge[, Nº := as.numeric(Nº)]
View(datasetToMerge)
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"), all = TRUE)
View(prueba)
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"), all = TRUE, sort = FALSE)
View(prueba)
join(Accidentalidad, datasetToMerge)
prueba <- setDT(Accidentalidad)[datasetToMerge, on=c("LUGAR ACCIDENTE", "Nº")]
View(prueba)
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"), sort = FALSE)
prueba <- merge(Accidentalidad, datasetToMerge, by = c("LUGAR ACCIDENTE", "Nº"), all = TRUE, sort = FALSE)
View(prueba)
library(plyr)
join(Accidentalidad, datasetToMerge)
prueba <- join(Accidentalidad, datasetToMerge)
View(prueba)
identical(prueba$FECHA, Accidentalidad$FECHA)
identical(prueba$FECHA, Accidentalidad$`LUGAR ACCIDENTE`)
identical(prueba$`LUGAR ACCIDENTE`, Accidentalidad$`LUGAR ACCIDENTE`)
identical(prueba$`LUGAR ACCIDENTE`, Accidentalidad$`LUGAR ACCIDENTE`)
rm(list = ls())
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Geocoded.RData")
# Para comprobar que dos columnas son enteras iguales (por ejemplo GeoAccidentalidad y Accidentalidad), se puede hacer
# identical(Accidentalidad$`LUGAR ACCIDENTE`, GeoAccidentalidad$`LUGAR ACCIDENTE`)
aux1 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
aux2 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
aux <- rbind(aux1, aux2)
dirGeolocalizadas <- cbind(aux, Geocoded$lat, Geocoded$lon)
GeoAccidentalidad <- join(Accidentalidad, dirGeolocalizadas)
save(GeoAccidentalidad, file = "../Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
View(GeoAccidentalidad)
View(Accidentalidad)
View(Geocoded)
View(aux2)
View(dirGeolocalizadas)
View(Geocoded)
aux1 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº != 0]$Nº)))
aux2 <- data.table(unique(cbind("LUGAR ACCIDENTE" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$`LUGAR ACCIDENTE`,
"Nº" = Accidentalidad[!grepl("AUTOVIA", `LUGAR ACCIDENTE`) & Nº == 0]$Nº)))
aux <- rbind(aux1, aux2)
dirGeolocalizadas <- cbind(aux, "lat" = Geocoded$lat, "lon" = Geocoded$lon)
GeoAccidentalidad <- join(Accidentalidad, dirGeolocalizadas)
save(GeoAccidentalidad, file = "../Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
View(GeoAccidentalidad)
View(dirGeolocalizadas)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
View(GeoAccidentalidad)
library(ggmap)
register_google(key = "AIzaSyBo4vW2UT8J5SjT88n3kqHN3e9t76ZUkmg")
library(dplyr)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
df = sample_n(df[,27:28], 50)
df = sample_n(GeoAccidentalidad[,27:28], 50)
View(df)
MadridMap <- qmap("Madrid", zoom = 14, color = "bw")
HoustonMap +
geom_point(aes(x = lon, y = lat), data = df, size = 1)
MadridMap +
geom_point(aes(x = lon, y = lat), data = df, size = 1)
MadridMap +
geom_point(aes(x = lon, y = lat), data = df, size = 2)
MadridMap +
geom_point(aes(x = lon, y = lat), data = df, size = 3)
MadridMap <- qmap("Madrid", zoom = 10, color = "bw")
MadridMap +
geom_point(aes(x = lon, y = lat), data = df, size = 3)
MadridMap <- qmap("Madrid", zoom = 12, color = "bw")
MadridMap +
geom_point(aes(x = lon, y = lat), data = df, size = 3)
df = sample_n(GeoAccidentalidad, 50)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = LESIVIDAD), data = df, size = 3)
df = sample_n(GeoAccidentalidad, 200)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = LESIVIDAD), data = df, size = 3)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = LESIVIDAD), data = df, size = 3)
MadridMap <- qmap("Madrid", zoom = 11, color = "bw")
register_google(key = "AIzaSyBo4vW2UT8J5SjT88n3kqHN3e9t76ZUkmg")
MadridMap <- qmap("Madrid", zoom = 11, color = "bw")
MadridMap +
geom_point(aes(x = lon, y = lat, colour = LESIVIDAD), data = df, size = 3)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = `TIPO VEHICULO`), data = df, size = 3)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = `Tipo Vehiculo`), data = df, size = 3)
MadridMap <- qmap("Madrid", zoom = 15, color = "bw")
register_google(key = "AIzaSyBo4vW2UT8J5SjT88n3kqHN3e9t76ZUkmg")
MadridMap <- qmap("Madrid", zoom = 15, color = "bw")
MadridMap +
geom_point(aes(x = lon, y = lat, colour = SEXO), data = df, size = 3)
MadridMap +
geom_point(aes(x = lon, y = lat, colour = SEXO), data = df, size = 4)
data(columbus, package="spData")
install.packages(c("arules", "backports", "BH", "broom", "callr", "caret", "clipr", "colorspace", "cowplot", "curl", "data.table", "ddalpha", "dendextend", "dimRed", "gbm", "ggpubr", "git2r", "haven", "httpuv", "ipred", "knitr", "lava", "lme4", "markdown", "mclust", "ModelMetrics", "openssl", "prabclus", "processx", "ps", "quantreg", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "rio", "rlang", "rstudioapi", "sfsmisc", "shiny", "tibble", "tidyr"))
install.packages("spData")
library(spData)
columbus
prueba = columbus
View(prueba)
install.packages("spgwr")
library(spgwr)
col.lm <- lm(CRIME ~ INC + HOVAL, data=columbus)
summary(col.lm)
col.bw <- gwr.sel(CRIME ~ INC + HOVAL, da
)
col.lm <- lm(CRIME ~ INC + HOVAL, data=columbus)
summary(col.lm)
col.bw <- gwr.sel(CRIME ~ INC + HOVAL, data = columus)
summary(col.bw)
col.lm <- lm(CRIME ~ INC + HOVAL, data=columbus)
summary(col.lm)
col.bw <- gwr.sel(CRIME ~ INC + HOVAL,data=columbus,
coords=cbind(columbus$X, columbus$Y))
View(col.lm)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
col.lm <- lm(CRIME ~ INC + HOVAL, data=columbus)
summary(col.lm)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
na.omit(GeoAccidentalidad)
GeoAccidentalidad = na.omit(GeoAccidentalidad)
col.lm <- lm(CRIME ~ INC + HOVAL, data=columbus)
summary(col.lm)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
library(dplyr)
GeoAccidentalidad = sample_n(GeoAccidentalidad, 10000)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
col.bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
col.bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
col.bw
GeoAccidentalidad = sample_n(GeoAccidentalidad, 1000)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon))
bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), bandwith = col.bw)
bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), bandwidth = col.bw)
bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), bandwidth = col.bw)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), gweight = gwr.Gauss,
+ verbose = FALSE)
col.bw <- gwr.sel(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), gweight = gwr.Gauss,
verbose = FALSE)
bw <- gwr(LESIVIDAD ~ SEXO + `DIA SEMANA`,data=GeoAccidentalidad,
coords=cbind(GeoAccidentalidad$lat, GeoAccidentalidad$lon), bandwidth = col.bw)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
col.lm <- lm(CLESIVIDAD ~ DISTRITO + SEXO, data=GeoAccidentalidad)
col.lm <- lm(LESIVIDAD ~ DISTRITO + SEXO, data=GeoAccidentalidad)
GeoAccidentalidad = na.omit(GeoAccidentalidad)
col.lm <- lm(LESIVIDAD ~ DISTRITO + SEXO, data=GeoAccidentalidad)
View(col.lm)
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/Accidentalidad.RData")
library(data.table)
Accidentalidad[, by = SEXO]
prueba <- Accidentalidad[, by = SEXO]
View(prueba)
prueba <- Accidentalidad[, mean(`Nº VICTIMAS *`), by = SEXO]
Accidentalidad[, mean(`Nº VICTIMAS *`), by = SEXO]
Accidentalidad[, mean(.SD), by = SEXO]
Accidentalidad[, print(.SD), by = SEXO]
Accidentalidad[, .N, by = SEXO]
Accidentalidad[, .N, by = list(SEXO, VEHICULO)]
Accidentalidad[, .N, by = list(SEXO, `Tipo Vehiculo`)]
load("~/Universidad/Máster en IA Avanzada/TFM/Accidentes de tráfico - Madrid/Cleaned_data/GeoAccidentalidad.RData")
library(data.table)
View(GeoAccidentalidad)
prueba <- GeoAccidentalidad[,FECHA := ]
library(lubridate)
dmy(GeoAccidentalidad$FECHA[249300])
prueba <- GeoAccidentalidad[,FECHA := dmy(FECHA)]
prueba$FECHA[1]
View(prueba)
day(prueba$FECHA[1])
month(prueba$FECHA[1])
year(prueba$FECHA[1])
prueba[,N, by = list(year(FECHA))]
prueba[,.N, by = list(year(FECHA))]
prueba[,.N, by = list(month(FECHA))]
prueba[,.N, by = list(day(FECHA))]
prueba[,.N, by = list(year(FECHA))]
prueba$`RANGO HORARIO`[1]
h(prueba$`RANGO HORARIO`[1])
